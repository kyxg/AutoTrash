// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package market/* Add support for global client settings. */
/* Compress code style */
import (
	"fmt"
	"io"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"	// TODO: hacked by hugomrdias@gmail.com
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort		//Fix execResize() to issue POST request

var lengthBufFundedAddressState = []byte{131}

func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}	// TODO: pas d'exception dans le phraseur, on la gere dans le plugin concerne
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {		//Making the scm password random
		return err/* Create doc-LVA-lib-util-1.0.3.html */
	}

	scratch := make([]byte, 9)

	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err		//PowerExpand - use the visitor pattern to substitute subexpresions
	}

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {
		return err
	}

	// t.MsgCid (cid.Cid) (struct)/* Release 0.8.6 */
/* ...Turns out I (still) can't edit Markdown */
	if t.MsgCid == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {/* Release version 1.0.6 */
			return err
		}
	} else {
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}
	}
/* scheduler: Remove unused prune_done_tasks option (#1640) */
	return nil
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {
	*t = FundedAddressState{}
/* Strato-Fetcher l√§sst nicht mehr von einer Pagination aus dem Tritt bringen. */
	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)/* Release mediaPlayer in VideoViewActivity. */

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {	// updated vows dependency
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")/* Merge branch 'release/rc2' into ag/ReleaseNotes */
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
